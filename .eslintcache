[{"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\index.js":"1","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\reportWebVitals.js":"2","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\users-base\\users.js":"3","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\assets\\pdp-mini-logo.js":"4","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\assets\\pdp-logo.js":"5","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DashboardRoot.js":"6","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\App.js":"7","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPanelChild.js":"8","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DrawerNavBar.js":"9","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DashboardRoute.js":"10","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPanelControl.js":"11","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaMain.js":"12","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPageChatArea.js":"13","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaFooterForm.js":"14","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\Drawer.js":"15","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\styles\\drawerWidth.js":"16","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaListPanel.js":"17","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\users-base\\faker.js":"18","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\TemplatePage.js":"19","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\UsersList.js":"20"},{"size":801,"mtime":1613694977715,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":4116,"mtime":1613714052746,"results":"24","hashOfConfig":"22"},{"size":816,"mtime":1613395314415,"results":"25","hashOfConfig":"22"},{"size":4691,"mtime":1613395174627,"results":"26","hashOfConfig":"22"},{"size":1458,"mtime":1613696012828,"results":"27","hashOfConfig":"22"},{"size":15235,"mtime":1613714992356,"results":"28","hashOfConfig":"22"},{"size":3745,"mtime":1613714651688,"results":"29","hashOfConfig":"22"},{"size":2979,"mtime":1613649063257,"results":"30","hashOfConfig":"22"},{"size":5172,"mtime":1613726384079,"results":"31","hashOfConfig":"22"},{"size":9671,"mtime":1613726119336,"results":"32","hashOfConfig":"22"},{"size":1037,"mtime":1613635325803,"results":"33","hashOfConfig":"22"},{"size":3142,"mtime":1613698131550,"results":"34","hashOfConfig":"22"},{"size":3150,"mtime":1613636141702,"results":"35","hashOfConfig":"22"},{"size":10918,"mtime":1613696111407,"results":"36","hashOfConfig":"22"},{"size":97,"mtime":1613647062579,"results":"37","hashOfConfig":"22"},{"size":11661,"mtime":1613635417336,"results":"38","hashOfConfig":"22"},{"size":56,"mtime":1612424269778,"results":"39","hashOfConfig":"22"},{"size":1953,"mtime":1613625789363,"results":"40","hashOfConfig":"22"},{"size":1918,"mtime":1613726260769,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18ydc0w",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\index.js",[],["92","93"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\reportWebVitals.js",[],["94","95"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\users-base\\users.js",["96"],"import faker from './faker';\r\nimport uuid from 'uuid/dist/v4';\r\n\r\nfunction generateTask(sortId) {\r\n    let fakeResult = [];\r\n    for(let task = 0; task < faker.random.number(40); task++) {\r\n        let sort = task % 3 ? sortId : uuid();\r\n        let lorem = faker.lorem.text();\r\n        function setFile() {\r\n            if (sort === sortId) {\r\n                return faker.random.number(10) < faker.random.number(10)\r\n            }\r\n        }\r\n        fakeResult.push({\r\n            id: sort,\r\n            file: setFile(),\r\n            text: lorem >= 1 ? lorem : \"Ok. please wait!\",\r\n            date: new Date()\r\n        });\r\n    }\r\n    return fakeResult;\r\n}\r\n\r\nfunction createFakeUser(count) {\r\n    let users = [];\r\n    for (let fake = 0; fake <= count; fake++) {\r\n        let userId = uuid();\r\n        users.push({\r\n            name: faker.name.findName(),\r\n            phoneNumber: faker.phone.phoneNumberFormat(5),\r\n            rating: Math.random() * 100,\r\n            notification: faker.random.number(10),\r\n            id: userId,\r\n            profile: faker.image.image(),\r\n            tasks: [\r\n                {\r\n                    number: \"1\",\r\n                    id: uuid(),\r\n                    exercise: \"Create Login Page with Material UI Components\",\r\n                    completed: false,\r\n                    rating: 2.5,\r\n                    messages: generateTask(userId)\r\n                },\r\n                {\r\n                    number: \"2\",\r\n                    id: uuid(),\r\n                    exercise: \"Create Login Page with Material UI Components\",\r\n                    completed: true,\r\n                    rating: 2.5,\r\n                    messages: generateTask(userId)\r\n                },\r\n                {\r\n                    number: \"3\",\r\n                    id: uuid(),\r\n                    exercise: \"Create Login Page with Material UI Components\",\r\n                    completed: true,\r\n                    rating: 2.5,\r\n                    messages: generateTask(userId)\r\n                },\r\n                {\r\n                    number: \"4\",\r\n                    id: uuid(),\r\n                    exercise: \"Create Login Page with Material UI Components\",\r\n                    completed: false,\r\n                    rating: 2.5,\r\n                    messages: generateTask(userId)\r\n                }\r\n            ],\r\n            support: faker.random.number(32) % 3 ? generateTask(userId) : false\r\n            /* tasks: [\r\n                {\r\n                    number: \"5\",\r\n                    id: uuid(),\r\n                    exercise: \"Create Login Page with Material UI Components\",\r\n                    completed: false,\r\n                    rating: 0,\r\n                    messages: [\r\n                        {\r\n                            id: userId,\r\n                            text: \"Hello techer.\"\r\n                        },\r\n                        {\r\n                            id: uuid(),\r\n                            text: \"Hi?!\"\r\n                        },\r\n                        {\r\n                            id: userId,\r\n                            text: \"How are you today? :)\"\r\n                        },\r\n                        {\r\n                            id: uuid(),\r\n                            text: \"Not bad, thanks. How are you?\"\r\n                        },\r\n                        {\r\n                            id: uuid(),\r\n                            text: \"Show me your homework. Quick 😡!!!\"\r\n                        },\r\n                        {\r\n                            id: userId,\r\n                            text: \"Homework? 😲\"\r\n                        }\r\n                    ]\r\n                }\r\n            ] */\r\n        });\r\n    }\r\n    return users;\r\n}\r\n\r\n//const base = createFakeUser(10);\r\nvar base;\r\nconst localStrage = window.localStorage.getItem('users');\r\nif(localStrage) {\r\n    let localBase = window.localStorage.getItem('users');\r\n    base = JSON.parse(localBase);\r\n} else {\r\n    base = createFakeUser(11);\r\n    window.localStorage.setItem('users', JSON.stringify(base));\r\n}\r\n\r\n\r\nexport default base;","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\assets\\pdp-mini-logo.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\assets\\pdp-logo.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DashboardRoot.js",["97","98"],"import React, { Component } from 'react';\r\nimport DrawerNavBar from \"./DrawerNavBar\";\r\nimport DrawerCore from './Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst drawerWidth = 240 //70;\r\nconst styles = theme => ({\r\n    containerWrapper: {\r\n        overflow: 'hidden'\r\n    },\r\n    mainApp: {\r\n        width: '100vw'\r\n    }\r\n});\r\n\r\nclass DashboardRoot extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        console.log('DASHBOARD ROOT HERE');\r\n    }\r\n    render() {\r\n        const { \r\n            classes,\r\n            children,\r\n            changeDrawerStatus,\r\n            drawerStatus\r\n        } = this.props;\r\n        const drawer = true;\r\n        return (\r\n            <div\r\n                className={`container-wrapper ${classes.containerWrapper}`}\r\n            >\r\n                <DrawerCore\r\n                    status={drawerStatus}\r\n                    handleChangeDrawerStatus={changeDrawerStatus}\r\n                />\r\n                <CssBaseline/>\r\n                <div className={classes.mainApp}>\r\n                    <DrawerNavBar status={drawerStatus}/>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withStyles(styles, { withTheme: true })(DashboardRoot);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\App.js",["99","100","101","102","103","104"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPanelChild.js",["105"],"import React from 'react';\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    listUserItem: {\r\n        background: '#fff',\r\n    },\r\n    listUserItemActive: {\r\n        borderLeft: '10px solid #019a2c',\r\n        backgroundColor: '#00b533',\r\n        color: '#fff',\r\n        fontWeight: 700,\r\n        transition: '.1s all ease',\r\n        '& p': {\r\n            color: '#fff'\r\n        },\r\n        '& .MuiBadge-badge': {\r\n            backgroundColor: '#fff',\r\n            color: '#019a2c'\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#02ac32',\r\n        }\r\n    },\r\n    userListText: {\r\n        fontWeight: '700 !important',\r\n        '& .MuiListItemText-primary': {\r\n            fontWeight: '700'\r\n        }\r\n    },\r\n    userBadge: {\r\n        width: '100%',\r\n        '& .MuiBadge-badge': {\r\n            [theme.breakpoints.up('md')]: {\r\n                right: '15px'\r\n            },\r\n            right: '30px',\r\n            bottom: '10px',\r\n            height: '30px',\r\n            width: '30px',\r\n            borderRadius: '50%',\r\n            fontSize: '1em'\r\n        }\r\n    },\r\n});\r\n\r\nfunction MentorPanelChild(props) {\r\n    const {\r\n        classes,\r\n        id, \r\n        name,\r\n        phoneNumber,\r\n        profile,\r\n        tasks,\r\n        history,\r\n        submitCloseDrawer,\r\n        notification,\r\n        pathLocation\r\n     } = props;\r\n    const handlePushTasksPage = () => {\r\n        history.push(`/dashboard/mentor/${pathLocation === \"hometask\" ? \"hometask\" : \"chat\"}/${id}`);\r\n        return submitCloseDrawer(\"close\");\r\n    }\r\n    const sliceStringLength = (string) => {\r\n        return string.length > 70\r\n            ? string.slice(0, 70) + '...' \r\n            : string;\r\n    }\r\n    const findLastMessage = (eachOfTasks) => {\r\n        const messagesList = eachOfTasks[eachOfTasks.length - 1].messages;\r\n        return sliceStringLength(messagesList[messagesList.length - 1].text);\r\n    }\r\n    const lastMessage = findLastMessage(tasks);\r\n    return (\r\n        <ListItem\r\n            button\r\n            key={id}\r\n            className={\r\n                `${classes.listUserItem}`\r\n            }\r\n            // ${3 === 3 && classes.listUserItemActive}\r\n            onClick={() => handlePushTasksPage()}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    alt={name}\r\n                    src={profile}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                className={classes.userlistText}\r\n                /* shuld uppercase: userListText */\r\n                primary={name}\r\n                secondary={\r\n                    <React.Fragment>\r\n                        <Badge\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right'\r\n                            }}\r\n                            style={{display: `${notification > 0 ? 'block' : 'none'}`}}\r\n                            color={'secondary'}\r\n                            badgeContent={notification}\r\n                            className={classes.userBadge}\r\n                        >\r\n                            {lastMessage}\r\n                        </Badge>\r\n                        {notification <= 0 && lastMessage}\r\n                    </React.Fragment>\r\n                }\r\n            />\r\n        </ListItem>\r\n    )\r\n}\r\nexport default  withStyles(styles)(MentorPanelChild);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DrawerNavBar.js",["106"],"import React, { Component } from 'react';\r\nimport classNames from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Box from '@material-ui/core/Box';\r\nimport NotificationIcon from '@material-ui/icons/Notifications';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { drawerWidth } from './styles/drawerWidth';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    drawerAppBar: {\r\n        boxShadow: 'none',\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        })\r\n    },\r\n    drawerAppBarShift: {\r\n        boxShadow: 'none !important',\r\n        width: `calc(100% - 70px)`,\r\n        marginLeft: '70px !important',\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        })\r\n    },\r\n    box: {\r\n        marginLeft: 'auto'\r\n    },\r\n    authorAvatar: {\r\n        padding: '10px'\r\n    },\r\n    authorName: {\r\n        flexGrow: 1\r\n    },\r\n})\r\n\r\nclass DrawerNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const { classes, status} = this.props;\r\n        const drawer = status === \"open\";\r\n        return (\r\n            <AppBar\r\n                color={'inherit'}\r\n                position={'static'}\r\n                className={classNames(classes.drawerAppBar, {\r\n                    [classes.drawerAppBarShift]: !drawer,\r\n                })}\r\n            >\r\n                <Toolbar position={'static'}>\r\n                    <Typography\r\n                        variant={'h6'}\r\n                        className={classes.authorName}\r\n                    >\r\n                        Michel Bernard\r\n                    </Typography>\r\n                    <Box className={classes.box}>\r\n                        <IconButton className={classes.authorAvatar}>\r\n                            <PersonOutlineIcon/>\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <Badge\r\n                                badgeContent={'6'}\r\n                                color={'secondary'}\r\n                            >\r\n                                <NotificationIcon/>\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Box>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\nexport default withStyles(styles)(DrawerNavBar);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\DashboardRoute.js",["107","108","109","110"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPanelControl.js",["111"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaMain.js",[],["112","113"],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\MentorPageChatArea.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaFooterForm.js",["114"],"import React, { Component } from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CameraIcon from \"@material-ui/icons/LinkedCamera\";\r\nimport GalleryIcon from \"@material-ui/icons/Image\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SendFileIcon from \"@material-ui/icons/Description\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport EmojiIcon from \"@material-ui/icons/Mood\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    chatAreaFooterForm: {\r\n        display: 'flex',\r\n        borderTop: '2px solid #eef2f4',\r\n        width: '100%',\r\n        padding: '10px 20px',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        backgroundColor: '#fff',\r\n        position: 'sticky',\r\n        bottom: 0,\r\n        left: 0,\r\n        '& .chat-footer-content': {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-around',\r\n            '& .chat-footer-item': {\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                marginLeft: '10px'\r\n            },\r\n            '& .chat-emoji': {\r\n                marginLeft: '20px'\r\n            }\r\n        },\r\n        '& .chat-footer-input': {\r\n            width: '80%',\r\n        }\r\n    },\r\n    chatInput: {\r\n        width: '100%',\r\n        marginLeft: '10px'\r\n    }\r\n});\r\n\r\nfunction ChatAreaFooterForm({classes}) {\r\n    return (\r\n        <div className={classes.chatAreaFooterForm}>\r\n            <div className={'chat-footer-content'}>\r\n                <div className={'chat-footer-item'}>\r\n                    <IconButton size={'small'}>\r\n                        <CameraIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className={'chat-footer-item'}>\r\n                    <IconButton size={'small'}>\r\n                        <GalleryIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className={'chat-footer-item'}>\r\n                    <IconButton size={'small'}>\r\n                        <AddCircleIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className={'chat-footer-item'}>\r\n                    <IconButton size={'small'}>\r\n                        <SendFileIcon/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className={'chat-footer-input'}>\r\n                <TextField\r\n                    label={'send message here'}\r\n                    className={classes.chatInput}\r\n                    margin={'dense'}\r\n                    variant={'outlined'}\r\n                    multiline\r\n                />\r\n            </div>\r\n            <div className={'chat-footer-content'}>\r\n                <div className={'chat-footer-item chat-emoji'}>\r\n                    <IconButton size={'small'}>\r\n                        <EmojiIcon/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default withStyles(styles)(ChatAreaFooterForm);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\Drawer.js",["115"],"import React, { Component } from 'react';\r\nimport classNames from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport CoursesIcon from '@material-ui/icons/ViewCarousel';\r\nimport ChatIcon from '@material-ui/icons/Sms';\r\nimport DevicesIcon from '@material-ui/icons/Devices';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport PushHomePageIcon from '@material-ui/icons/ExitToApp';\r\nimport LogoutPlatformIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { drawerWidth } from './styles/drawerWidth';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    drawer: {\r\n        overflow: 'hidden'\r\n    },\r\n    drawerAppBar: {\r\n        boxShadow: 'none',\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        })\r\n    },\r\n    drawerAppBarShift: {\r\n        boxShadow: 'none !important',\r\n        width: `calc(100% - 70px)`,\r\n        marginLeft: '70px !important',\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        })\r\n    },\r\n    drawerPaper: {\r\n        overflowX: 'hidden',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerStatus: {\r\n        width: '70px !important',\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    drawerContent: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        margin:'4px 2px 4px',\r\n        padding: '10px 10px'\r\n    },\r\n    drawerList: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        padding: '5px 5px 2px',\r\n        paddingBottom: '4rem'\r\n    },\r\n    drawerListIcon: {\r\n        padding: '5px'\r\n    },\r\n    listMenu: {\r\n        marginTop: '5rem'\r\n    },\r\n    drawerControlDivider: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        width: '100%',\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #f8f8f8'\r\n    },\r\n    drawerControl: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n});\r\n\r\nclass DrawerCore extends Component{\r\n    static defaultProps = {\r\n        defaultDuration: 986.6,\r\n        closeDuration: 1165\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showText: true\r\n        }\r\n        this.handleSubmitDrawerStatus = this.handleSubmitDrawerStatus.bind(this);\r\n        this.changeDrawerStatusWithMouseEvent = this.changeDrawerStatusWithMouseEvent.bind(this);\r\n        this.closeDrawerWithMouseLeave = this.closeDrawerWithMouseLeave.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        console.log('DASHBOARD DRAWER HERE')\r\n    }\r\n    handleSubmitDrawerStatus() {\r\n        this.props.handleChangeDrawerStatus(\r\n            this.props.status === \"open\" ? \"close\" : \"open\"\r\n        );\r\n    }\r\n    changeDrawerStatusWithMouseEvent(mouseEvent) {\r\n        setTimeout(() => {\r\n            this.props.handleChangeDrawerStatus(\"open\");\r\n        }, this.props.defaultDuration);\r\n    }\r\n    closeDrawerWithMouseLeave(leaveEvent) {\r\n        setTimeout(() => {\r\n            this.props.handleChangeDrawerStatus(\"close\");\r\n        }, this.props.closeDuration);\r\n    }\r\n    pushTextStatus = (event, sec) => {\r\n        // setTimeout(() => {\r\n        //     this.setState({showText: event});\r\n        // }, sec);\r\n    }\r\n    componentDidUpdate() {\r\n        console.log('update drawer status')\r\n        if(this.props.status === \"open\") {\r\n            this.pushTextStatus(true, 500);\r\n        } else {\r\n            this.pushTextStatus(false, 0);\r\n        }\r\n    }\r\n    render() {\r\n        const { classes, status } = this.props;\r\n        const { showText } = this.state;\r\n        const drawer = status === \"open\";\r\n        return (\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant={'permanent'}\r\n                className={classNames({\r\n                    [classes.drawerPaper]: drawer,\r\n                    [classes.drawerStatus]: !drawer,\r\n                })}\r\n                classes={{\r\n                    paper: classNames({\r\n                        [classes.drawerPaper]: drawer,\r\n                        [classes.drawerStatus]: !drawer,\r\n                    }),\r\n                }}\r\n                anchor={'left'}\r\n                position={'static'}\r\n            >\r\n                <div className={\r\n                    `${classes.toolbar}\r\n                    ${classes.drawerContent}`\r\n                }\r\n                >\r\n                    {/* { drawer\r\n                            ? <PdpLogo/>\r\n                            : <PdpMiniLogo/>\r\n                        } */}\r\n                </div>\r\n                <Divider/>\r\n                <List \r\n                    className={classes.drawerList}\r\n                    // onMouseOver={this.changeDrawerStatusWithMouseEvent}\r\n                    // onMouseLeave={this.closeDrawerWithMouseLeave}Z\r\n                >\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <DashboardIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'Dashboard'}/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <CoursesIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'All Courses'}/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <ChatIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'Mentors Page'}/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <DevicesIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'Devices'}/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <VideocamIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'Zoom'}/>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.drawerListItem}\r\n                    >\r\n                        <ListItemIcon className={classes.drawerListIcon}>\r\n                            <SettingsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={showText && 'Settings'}/>\r\n                    </ListItem>\r\n                    <Grid\r\n                        item\r\n                        className={classes.listMenu}\r\n                    >\r\n                        <ListItem\r\n                            button\r\n                            className={classes.drawerListItem}\r\n                        >\r\n                            <ListItemIcon className={classes.drawerListIcon}>\r\n                                <PushHomePageIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={showText && 'Go Home Page'}/>\r\n                        </ListItem>\r\n                        <ListItem\r\n                            button\r\n                            className={classes.drawerListItem}\r\n                        >\r\n                            <ListItemIcon className={classes.drawerListIcon}>\r\n                                <LogoutPlatformIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={showText && 'Logout'}/>\r\n                        </ListItem>\r\n                    </Grid>\r\n                </List>\r\n                <div className={classes.drawerControlDivider}>\r\n                    <Grid\r\n                        item\r\n                        direction={'column'}\r\n                        justify={'center'}\r\n                        alignItems={'center'}\r\n                        className={classes.drawerControl}\r\n                    >\r\n                        <Tooltip\r\n                            title={!drawer ?'open' : 'close'}\r\n                            placement={'top'}\r\n                        >\r\n                            <IconButton\r\n                                onClick={this.handleSubmitDrawerStatus}\r\n                            >\r\n                                { !drawer\r\n                                    ? <ChevronRightIcon/>\r\n                                    : <ChevronLeftIcon/>\r\n                                }\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </div>\r\n            </Drawer>\r\n        )\r\n    }\r\n}\r\nexport default withStyles(styles)(DrawerCore);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\styles\\drawerWidth.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\ChatAreaListPanel.js",["116","117","118","119"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport StarIcon from '@material-ui/icons/Grade';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    cardListArea: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        transition: 'transform ease-out 0.3s',\r\n        //overflowX: 'hidden',\r\n        //overflowY: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #f8f8f8'\r\n    },\r\n    listCard: {\r\n        width: '6rem !important',\r\n        height: '120px !important',\r\n        boxShadow: 'none',\r\n        borderRight: '2px solid #f8f8f8',\r\n        textAlign: 'center',\r\n        padding: 0,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        transform: 'translateZ(0)'\r\n    },\r\n    cardMedia: {\r\n        textAlign: 'center',\r\n        '& h6': {\r\n            marginTop: '5px'\r\n        }\r\n    },\r\n    cardContent: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-around',\r\n        '& svg': {\r\n            color: '#FFB42D'\r\n        },\r\n        '& h6': {\r\n            marginBottom: '0',\r\n            fontSize: '1.1em'\r\n        }\r\n    },\r\n    cardActions: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#a5a5a5'\r\n    },\r\n    gridListStepper: {\r\n        flexGrow: 1,\r\n        padding: 0,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'spacebetween',\r\n        width: '100%',\r\n        background: '#fff',\r\n        borderRadius: '2px solid #f8f8f8',\r\n        '& svg': {\r\n            margin: 'auto'\r\n        }\r\n    },\r\n    stepperStart: {\r\n        width: '100px',\r\n        backgroundColor: 'rgb(0 0 0 / 4%)'\r\n    },\r\n    stepperEnd: {\r\n        width: '100px',\r\n        backgroundColor: 'rgb(0 0 0 / 4%)'\r\n    },\r\n    gridListStepperIcon: {\r\n        margin: 'auto'\r\n    },\r\n    gridListStepperButton: {\r\n        border: '2px solid #f8f8f8'\r\n    },\r\n});\r\n\r\nfunction ChatAreaListPanel({classes }) {\r\n    const defaultScroll = 100;\r\n    const defaultScrollX = -100;\r\n    const listRef = useRef(null);\r\n    const [transformAnchorX, pushTransformAnchorX] = useState(0);\r\n    const [scrollAnchorEl, pushScrollAnchorEl] = useState(400);\r\n    /**\r\n     *  const [disable, pushDisable] = useState(\"prev\");\r\n     *  Why we use push here?\r\n     *  exactly for navigation buttons...\r\n     */\r\n    const scrollGridCard = (scrollOffset) => {\r\n        /** @func\r\n         * this logic { func } - created by Michel\r\n         * github: https://github.com/michelswiss\r\n         * tester: https://github.com/fainat\r\n         */\r\n        let localScroll = transformAnchorX;\r\n        let _scrollWidth = listRef.current.scrollWidth;\r\n        let coniformScrollX = listRef.current.style.transform;\r\n        let disableScroll = Number(coniformScrollX.slice(11, -3));\r\n        let _scrollWidthX = ((-0) - (_scrollWidth - 280));\r\n        // modify this logic\r\n        //console.log(scrollOffset + ' === ' + defaultScroll + ' ' + coniformScrollX);\r\n        // if scroll offset translate = 0 && scrollOffset === 100\r\n        console.log(_scrollWidth, coniformScrollX);\r\n        if(scrollOffset === 0) {\r\n            // if our disable scroll position equals or big > 0\r\n            localScroll = 0;\r\n        } else if ((scrollOffset === defaultScrollX) || (scrollOffset === defaultScroll)) {\r\n            //console.log(coniformScrollX + ' === ' + `translateX(${localScroll + (scrollOffset)}px)`)\r\n            //console.log(scrollOffset < defaultScroll);\r\n            //console.log(coniformScrollX.includes('(0px)'));\r\n            if(disableScroll >= 0 && scrollOffset === defaultScroll) {\r\n                localScroll = 0;\r\n                console.log('scrollOffsetX is => (X)')\r\n            }\r\n            else if (scrollOffset < defaultScroll) {\r\n                if (!(disableScroll <= _scrollWidthX)) {\r\n                    localScroll += (scrollOffset)\r\n                }\r\n            } else {\r\n                localScroll += (scrollOffset)\r\n            }\r\n        } else if(scrollOffset === \"end\") {\r\n            localScroll = _scrollWidthX;\r\n        }\r\n        pushTransformAnchorX(localScroll);\r\n        /**\r\n         * ref dom element HTML config\r\n         * let _scrollAnimation = listRef.current.scrollLeft;\r\n         * let _scrollWidth = listRef.current.scrollWidth;\r\n         */\r\n        //pushTransformAnchorX(scrollOffset);\r\n        /** @template\r\n         * Hmm, whats happen with bottom function?\r\n         * Because this section must use, transform CSS properties.\r\n         *  - and overflow scroll animation doesnt true for this section\r\n         *  ( if you like this way common... clone and try it... )\r\n         */\r\n        /** @param let _offset = findOffset(scrollOffset); */\r\n        /**\r\n         * for animation\r\n         let initialScroll = 0;\r\n         const toScroll = setInterval(() => {\r\n                initialScroll+=5;\r\n                listRef.current.scrollLeft += initialScroll;\r\n                if(initialScroll >= Math.floor(_offset)){\r\n                    clearInterval(toScroll);\r\n                }\r\n            }, 100);\r\n         */\r\n        /* listRef.current.scrollLeft += _offset; */\r\n    };\r\n    const findOffset = (offset) => {\r\n        /* create list isEven values */\r\n        /* use this ection fot only your div has overflow ++ */\r\n        let _eachof = [];\r\n        Array(10).fill(null).map((_, i) => {\r\n            _eachof.push(offset % 2 === 0\r\n                ? i\r\n                : 4\r\n            );\r\n        })\r\n        _eachof = Math.max(..._eachof);\r\n        let _atan = Math.atan(_eachof);\r\n        /* find normal offset size */\r\n        _eachof = _eachof / _atan;\r\n        let even = (_eachof / _atan) * offset;\r\n        /* generate normal offset */\r\n        return even;\r\n    }\r\n    useEffect(() => {\r\n        console.log('this is new state', transformAnchorX);\r\n        listRef.current.style.transform = `translateX(${transformAnchorX}px)`;\r\n    }, [transformAnchorX])\r\n    return (\r\n        <React.Fragment>\r\n            <Box\r\n                className={classes.cardListArea}\r\n                ref={listRef}\r\n                /** style={{transform: 'translateX(-230px) !important'}} */\r\n            >\r\n                {/* <Slides/> */}\r\n                <Grid\r\n                    direction={'row'}\r\n                    justify={'center'}\r\n                    alignItems={'center'}\r\n                >\r\n                    <GridList className={classes.gridList}>\r\n                        {\r\n                            Array(10).fill(null).map((item, i) => (\r\n                                <Card\r\n                                    key={i}\r\n                                    className={classes.listCard}\r\n                                >\r\n                                    <CardActionArea>\r\n                                        <CardMedia className={classes.cardMedia}>\r\n                                            <Typography variant={'h6'}>\r\n                                                {i}\r\n                                            </Typography>\r\n                                        </CardMedia>\r\n                                        <CardContent className={classes.cardContent}>\r\n                                            <Box>\r\n                                                <StarIcon/>\r\n                                            </Box>\r\n                                            <Typography\r\n                                                gutterBottom\r\n                                                variant={'subtitle2'}\r\n                                            >\r\n                                                5\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                    <CardActions className={classes.cardActions}>\r\n                                        <Badge\r\n                                            color={'secondary'}\r\n                                            badgeContent={9}\r\n                                        >\r\n                                            <Typography>\r\n                                                HARD\r\n                                            </Typography>\r\n                                        </Badge>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            ))\r\n                        }\r\n                    </GridList>\r\n                </Grid>\r\n            </Box>\r\n            <div className={'w-100'}>\r\n                <List className={classes.gridListStepper}>\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => scrollGridCard(0)}\r\n                        className={classes.stepperStart}\r\n                    >\r\n                        <ListItemIcon\r\n                            className={classes.gridListStepperIcon}\r\n                        >\r\n                            <ChevronLeftIcon/>\r\n                        </ListItemIcon>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        className={classes.gridListStepperButton}\r\n                        onClick={() => scrollGridCard(defaultScroll)}\r\n                    >\r\n                        <ListItemIcon\r\n                            className={classes.gridListStepperIcon}\r\n                        >\r\n                            <ChevronLeftIcon/>\r\n                        </ListItemIcon>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => scrollGridCard(defaultScrollX)}\r\n                        className={classes.gridListStepperButton}\r\n                    >\r\n                        <ListItemIcon\r\n                            className={classes.gridListStepperIcon}\r\n                        >\r\n                            <ChevronRightIcon/>\r\n                        </ListItemIcon>\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => scrollGridCard(\"end\")}\r\n                        className={classes.stepperEnd}\r\n                    >\r\n                        <ListItemIcon\r\n                            className={classes.gridListStepperIcon}\r\n                        >\r\n                            <ChevronRightIcon/>\r\n                        </ListItemIcon>\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default withStyles(styles)(ChatAreaListPanel);","D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\users-base\\faker.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\TemplatePage.js",[],"D:\\0.Suhrobs-personal-file\\0.My-project-file\\Backend-Advence\\2.React-Bootcamp\\infab.us\\src\\architecture.directory\\UsersList.js",["120","121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":11,"column":24,"nodeType":"130","messageId":"131","endLine":11,"endColumn":73},{"ruleId":"132","severity":1,"message":"133","line":8,"column":7,"nodeType":"134","messageId":"135","endLine":8,"endColumn":18},{"ruleId":"132","severity":1,"message":"136","line":35,"column":15,"nodeType":"134","messageId":"135","endLine":35,"endColumn":21},{"ruleId":"132","severity":1,"message":"137","line":2,"column":25,"nodeType":"134","messageId":"135","endLine":2,"endColumn":33},{"ruleId":"132","severity":1,"message":"138","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":25},{"ruleId":"132","severity":1,"message":"139","line":3,"column":27,"nodeType":"134","messageId":"135","endLine":3,"endColumn":40},{"ruleId":"132","severity":1,"message":"140","line":174,"column":10,"nodeType":"134","messageId":"135","endLine":174,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":194,"column":26,"nodeType":"143","messageId":"144","endLine":269,"endColumn":32},{"ruleId":"141","severity":1,"message":"142","line":270,"column":25,"nodeType":"143","messageId":"144","endLine":290,"endColumn":66},{"ruleId":"132","severity":1,"message":"145","line":57,"column":9,"nodeType":"134","messageId":"135","endLine":57,"endColumn":20},{"ruleId":"146","severity":1,"message":"147","line":46,"column":5,"nodeType":"148","messageId":"149","endLine":48,"endColumn":6},{"ruleId":"146","severity":1,"message":"147","line":55,"column":5,"nodeType":"148","messageId":"149","endLine":57,"endColumn":6},{"ruleId":"132","severity":1,"message":"150","line":66,"column":13,"nodeType":"134","messageId":"135","endLine":66,"endColumn":21},{"ruleId":"132","severity":1,"message":"151","line":67,"column":13,"nodeType":"134","messageId":"135","endLine":67,"endColumn":25},{"ruleId":"152","severity":1,"message":"153","line":112,"column":78,"nodeType":"154","endLine":114,"endColumn":37},{"ruleId":"132","severity":1,"message":"155","line":131,"column":11,"nodeType":"134","messageId":"135","endLine":131,"endColumn":17},{"ruleId":"122","replacedBy":"156"},{"ruleId":"124","replacedBy":"157"},{"ruleId":"132","severity":1,"message":"158","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"159","severity":1,"message":"160","line":150,"column":17,"nodeType":"161","endLine":153,"endColumn":20},{"ruleId":"132","severity":1,"message":"162","line":102,"column":12,"nodeType":"134","messageId":"135","endLine":102,"endColumn":26},{"ruleId":"132","severity":1,"message":"163","line":102,"column":28,"nodeType":"134","messageId":"135","endLine":102,"endColumn":46},{"ruleId":"132","severity":1,"message":"164","line":171,"column":11,"nodeType":"134","messageId":"135","endLine":171,"endColumn":21},{"ruleId":"165","severity":1,"message":"166","line":175,"column":41,"nodeType":"167","messageId":"168","endLine":175,"endColumn":43},{"ruleId":"132","severity":1,"message":"169","line":4,"column":10,"nodeType":"134","messageId":"135","endLine":4,"endColumn":20},{"ruleId":"165","severity":1,"message":"170","line":10,"column":39,"nodeType":"167","messageId":"171","endLine":10,"endColumn":41},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],["172"],["173"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-unused-vars","'drawerWidth' is assigned a value but never used.","Identifier","unusedVar","'drawer' is assigned a value but never used.","'Redirect' is defined but never used.","'TransitionGroup' is defined but never used.","'CSSTransition' is defined but never used.","'DashboardMain' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'phoneNumber' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'listArea' is assigned a value but never used.","'areaCategory' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","'people' is assigned a value but never used.",["172"],["173"],"'Component' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'scrollAnchorEl' is assigned a value but never used.","'pushScrollAnchorEl' is assigned a value but never used.","'findOffset' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'withStyles' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation"]